@model H2StyleStore.Models.ViewModels.OrderVM


@{
    ViewBag.Title = "Edit";
    IEnumerable<SelectListItem> status_order = ViewBag.Status_order;
    IEnumerable<SelectListItem> statusDescription = ViewBag.StatusDescription;
    var statusInDb = status_order.ToList();

}

<h2>修改訂單</h2>

<div class="text-lg-right">
    <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#exampleModal">取消訂單</button>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title text-center" id="exampleModalLabel">訂單取消</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group col-md-12">
                    <div>如果此筆訂單是顧客改變主意、商品斷貨等問題則建議可以取消訂單。取消訂單是<u><b>不可恢復的</b></u>。</div>
                    @Html.LabelFor(model => model.Status_Description, htmlAttributes: new { @class = "control-label" })
                <div class="col-md-12 container-fluid">
                    @Html.DropDownListFor(model => model.Status_Description, statusDescription, new { @class = "form-control " })
                    @Html.ValidationMessageFor(model => model.Status_Description, "", new { @class = "text-danger" })
                    <div class="mt-3"><input type="checkbox" id="chk_1" /><label for="chk_1">發送通知郵件給顧客</label></div>
                </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">關閉</button>
                <button type="button" class="btn btn-danger" id="cancel">取消此訂單</button>
            </div>
        </div>
    </div>
</div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="mx-3">
            <div class="row col-md-12 mb-3">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Order_id, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Order_id, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Order_id, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.MemberName, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-612">
                        @Html.EditorFor(model => model.MemberName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.MemberName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.EmployeeAccount, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EmployeeAccount, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.EmployeeAccount, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row col-md-12 mb-3">
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.CreatedTime, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        <input type="text" name="CreatedTime" value="@Model.CreatedTime" disabled class="form-control" />
                        @Html.ValidationMessageFor(model => model.CreatedTime, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row col-md-12 mb-3">
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Total, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Total, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Total, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.Payment, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Payment, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Payment, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>


            <div class="row col-md-12 mb-3">
                @{
                    string shippedDate = string.Empty;
                    if (Model.ShippedDate.HasValue)
                    {
                        shippedDate = Model.ShippedDate.Value.ToString("yyyy-MM-ddTHH:mm:ss");
                    }
                }
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.ShippedDate, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        <input class="form-control" type="datetime-local" value="@shippedDate" name="ShippedDate" />
                    </div>
                </div>

                <div class="form-group  col-md-4">
                    @Html.LabelFor(model => model.ShipVia, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ShipVia, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ShipVia, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group  col-md-4">
                    @Html.LabelFor(model => model.Freight, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Freight, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Freight, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="row col-md-12 mb-3">
                <div class="form-group  col-md-4">
                    @Html.LabelFor(model => model.ShipName, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ShipName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ShipName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group  col-md-4">
                    @Html.LabelFor(model => model.ShipPhone, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ShipPhone, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ShipPhone, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.ShipAddress, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ShipAddress, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.ShipAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row col-md-12 mb-3">
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.RequestRefund, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        <div class="checkbox">
                            @Html.CheckBoxFor(model => model.RequestRefund, new { disabled = "disabled" })
                            @Html.ValidationMessageFor(model => model.RequestRefund, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.RequestRefundTime, htmlAttributes: new { @class = "control-label" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.RequestRefundTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.RequestRefundTime, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label" })
                    <select name="orders.Status" class="form-control">
                        <option value="@Model.Status">@Model.Status</option>

                        @for (int k = 0; k < statusInDb.Count; k++)
                        {
                            if (statusInDb[k].Text != @Model.Status)
                            {
                                <option value="@statusInDb[k].Text">@statusInDb[k].Text</option>
                            }
                        }
                    </select>
                </div>
                <br>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-5">
                        <input type="submit" value="確定修改" class="btn btn-default" onclick="return confirm('確定修改?')" />
                    </div>
                </div>
                <div>
                    <a href="../Index" class="nav-link">
                        <i class="fa-solid fa-rotate-left"></i>
                        回列表
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $('#exampleModal').on('click', '#cancel', function () {
            var obj = {
                Order_id: $('#Order_id').val(),
                Status_Description: $('#Status_Description').val()
            }

            $.ajax({
                url: '@Url.Action("Cancel","Order")',
                data: JSON.stringify(obj),
                type: "POST",
                contentType: "application/json"
            }).done(function (result) {
                alert(result); window.location.href = "https://localhost:44313/Order/Index/"
            }).fail(function (err) {
                alert(err.statusText)
            })

            $('#exampleModal').modal('hide');
            
        });



       

    </script>
}
